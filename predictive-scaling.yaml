AWSTemplateFormatVersion: '2010-09-09'
Description: Automate Aurora Serverless V2 Scale Up and Scale Down with Lambda, CloudWatch Events, and Resource Tags

Parameters:
  ScaleUpFunctionName:
    Type: String
    Default: "ScaleUpFunction"
    Description: Name of the Scale Up Lambda function.

  ScaleDownFunctionName:
    Type: String
    Default: "ScaleDownFunction"
    Description: Name of the Scale Down Lambda function.

  ScaleUpScheduleExpression:
    Type: String
    Default: "cron(0 5 * * ? *)" # Default to scale up at 5:00 AM UTC
    Description: Cron expression for the scale up schedule of Aurora Serverless V2 in UTC.

  ScaleDownScheduleExpression:
    Type: String
    Default: "cron(0 23 * * ? *)" # Default to scale down at 11:00 PM UTC
    Description: Cron expression for the scale down schedule of Aurora Serverless V2 in UTC.

  ScaleUpMinACU:
    Type: Number
    Default: 8
    Description: Minimum ACU to set when scaling up the Aurora Serverless V2 cluster.

  ScaleUpMaxACU:
    Type: Number
    Default: 64
    Description: Maximum ACU to set when scaling up the Aurora Serverless V2 cluster.

  ScaleDownMinACU:
    Type: Number
    Default: 2
    Description: Minimum ACU to set when scaling down the Aurora Serverless V2 cluster.

  ScaleDownMaxACU:
    Type: Number
    Default: 32
    Description: Maximum ACU to set when scaling down the Aurora Serverless V2 cluster.

Resources:
  ScaleUpRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ScaleUpRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ScaleUpPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ScaleUpFunctionName}:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ScaleUpFunctionName}"
              - Effect: Allow
                Action:
                  - "rds:DescribeDBClusters"
                  - "rds:ListTagsForResource"
                Resource: "*"
              - Effect: Allow
                Action: "rds:ModifyDBCluster"
                Resource: !Sub "arn:aws:rds:*:${AWS::AccountId}:cluster:*"
                Condition:
                  StringEquals:
                    "rds:cluster-tag/scale-up": "yes"

  ScaleDownRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ScaleDownRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ScaleDownPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ScaleDownFunctionName}:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ScaleDownFunctionName}"
              - Effect: Allow
                Action:
                  - "rds:DescribeDBClusters"
                  - "rds:ListTagsForResource"
                Resource: "*"
              - Effect: Allow
                Action: "rds:ModifyDBCluster"
                Resource: !Sub "arn:aws:rds:*:${AWS::AccountId}:cluster:*"
                Condition:
                  StringEquals:
                    "rds:cluster-tag/scale-down": "yes"

  ScaleUpFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ScaleUpFunctionName
      Handler: index.lambda_handler
      Role: !GetAtt ScaleUpRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os  # Import the os module

          # Initialize the RDS client
          client = boto3.client('rds')

          def lambda_handler(event, context):
              clusters = client.describe_db_clusters()
              
              for cluster in clusters['DBClusters']:
                  # Log basic cluster information
                  print(f"Cluster ID: {cluster['DBClusterIdentifier']}, Engine: {cluster['Engine']}")

                  # Check if ServerlessV2ScalingConfiguration is present to determine if the cluster is Serverless V2
                  if 'ServerlessV2ScalingConfiguration' in cluster:
                      print(f"Found Serverless V2 Cluster: {cluster['DBClusterIdentifier']}")

                      # List tags for the cluster
                      tags = client.list_tags_for_resource(ResourceName=cluster['DBClusterArn'])['TagList']
                      
                      # Check if the 'scale-up' tag is set to 'yes'
                      if any(tag['Key'] == 'scale-up' and tag['Value'] == 'yes' for tag in tags):
                          # Fetch the min and max capacity from environment variables
                          min_capacity = int(os.environ.get('MIN_CAPACITY', '8'))  # Default to 8 if not set
                          max_capacity = int(os.environ.get('MAX_CAPACITY', '64'))  # Default to 64 if not set
                          try:
                            # Modify the Serverless V2 scaling configuration
                            response = client.modify_db_cluster(
                                DBClusterIdentifier=cluster['DBClusterIdentifier'],
                                ServerlessV2ScalingConfiguration={
                                    'MinCapacity': min_capacity,
                                    'MaxCapacity': max_capacity
                                },
                                ApplyImmediately=True
                            )
                            print(f"Configured Serverless V2 scaling settings for {cluster['DBClusterIdentifier']} to MinCapacity: {min_capacity} and MaxCapacity: {max_capacity}")
                          except Exception as e:
                            # Catch-all for any other exceptions not specified
                            print(f"An unexpected error occurred while modifying {cluster['DBClusterIdentifier']}: {e}")
      Runtime: python3.12
      Timeout: 300
      Environment:
        Variables:
          MIN_CAPACITY: !Ref ScaleUpMinACU
          MAX_CAPACITY: !Ref ScaleUpMaxACU

  ScaleDownFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref ScaleDownFunctionName
      Handler: index.lambda_handler
      Role: !GetAtt ScaleDownRole.Arn
      Code:
        ZipFile: |
          import boto3
          import os  # Import the os module

          # Initialize the RDS client
          client = boto3.client('rds')

          def lambda_handler(event, context):
              # Read the min and max capacity from environment variables with defaults
              min_capacity = int(os.environ.get('MIN_CAPACITY', '2'))  # Default to 2 if not set
              max_capacity = int(os.environ.get('MAX_CAPACITY', '16'))  # Default to 16 if not set

              clusters = client.describe_db_clusters()
              for cluster in clusters['DBClusters']:
                  # Check for serverless instances; assuming all serverless instances are V2 for this example
                  if 'ServerlessV2ScalingConfiguration' in cluster:
                      tags = client.list_tags_for_resource(ResourceName=cluster['DBClusterArn'])['TagList']
                      if any(tag['Key'] == 'scale-down' and tag['Value'] == 'yes' for tag in tags):
                          # Modify the DB cluster with the new Serverless V2 scaling configuration for scale down
                          try:
                            response = client.modify_db_cluster(
                                DBClusterIdentifier=cluster['DBClusterIdentifier'],
                                ServerlessV2ScalingConfiguration={
                                    'MinCapacity': min_capacity,
                                    'MaxCapacity': max_capacity
                                },
                                ApplyImmediately=True
                            )
                            print(f"Scaled down {cluster['DBClusterIdentifier']} to MinCapacity: {min_capacity} and MaxCapacity: {max_capacity} ACUs.")
                          except Exception as e:
                            # Catch-all for any other exceptions not specified
                            print(f"An unexpected error occurred while modifying {cluster['DBClusterIdentifier']}: {e}")
      Runtime: python3.12
      Timeout: 300
      Environment:
        Variables:
          MIN_CAPACITY: !Ref ScaleDownMinACU
          MAX_CAPACITY: !Ref ScaleDownMaxACU
      
  ScaleUpRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "ScaleUpRule"
      Description: "Schedule to scale up Aurora Serverless V2 clusters"
      ScheduleExpression: !Ref ScaleUpScheduleExpression
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ScaleUpFunction.Arn
          Id: "ScaleUpTarget"

  ScaleUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ScaleUpFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScaleUpRule.Arn

  ScaleDownRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "ScaleDownRule"
      Description: "Schedule to scale down Aurora Serverless V2 clusters"
      ScheduleExpression: !Ref ScaleDownScheduleExpression
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt ScaleDownFunction.Arn
          Id: "ScaleDownTarget"

  ScaleDownPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ScaleDownFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScaleDownRule.Arn

Outputs:
  ScaleUpRoleArn:
    Description: ARN of the Scale Up IAM Role
    Value: !GetAtt ScaleUpRole.Arn

  ScaleDownRoleArn:
    Description: ARN of the Scale Down IAM Role
    Value: !GetAtt ScaleDownRole.Arn

  ScaleUpFunctionArn:
    Description: ARN of the Scale Up Lambda Function
    Value: !GetAtt ScaleUpFunction.Arn

  ScaleDownFunctionArn:
    Description: ARN of the Scale Down Lambda Function
    Value: !GetAtt ScaleDownFunction.Arn

  ScaleUpRuleArn:
    Description: ARN of the Scale Up EventBridge Rule
    Value: !GetAtt ScaleUpRule.Arn

  ScaleDownRuleArn:
    Description: ARN of the Scale Down EventBridge Rule
    Value: !GetAtt ScaleDownRule.Arn
